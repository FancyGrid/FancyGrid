Fancy.modules["chart-integration"]=!0,Fancy.define("Fancy.grid.plugin.ChartIntegration",{extend:Fancy.Plugin,ptype:"grid.chartintegration",inWidgetName:"chartintegration",constructor:function(){this.Super("const",arguments)},init(){this.Super("init",arguments),this.initKeys(),this.initBind(),this.ons()},initKeys(){for(var t=this.chart,e=0,r=t.length;e<r;e++){var i,s=t[e].fields,a=0,h={};if(Fancy.isString(s))h=s;else for(i=s.length;a<i;a++)h[s[a]]=!0;t[e].keys=h}},ons(){const t=this,e=t.widget,r=e.store;e.once("render",()=>{t.toChart?t.renderToChart():t.readDataFromChart(),r.on("set",t.onSet,t),r.on("sort",t.onSort,t)})},renderToChart(){for(var t=this.widget,e=this.chart,r=0,i=e.length;r<i;r++){const i=e[r];switch(i.type){case"highchart":case"highcharts":t.highchart.setData(i)}}},onSet(t,e){for(var r=this.widget,i=this.chart,s=0,a=i.length,h=e.key;s<a;s++){const t=i[s],a=t.type;if(!0===t.keys[h])switch(a){case"highchart":case"highcharts":r.highchart.set(t,e)}}},onSort(t,e){for(var r=this.widget,i=this.chart,s=0,a=i.length;s<a;s++){const t=i[s];switch(t.type){case"highchart":case"highcharts":if(!1!==t.sortBind){const a=r.highchart.sort(t,e);i[s].categories=a.original}}}},readDataFromChart(){var t,e=this.widget,r=e.store,i=this.chart[0];switch(i.type){case"highchart":case"highcharts":t=e.highchart.getData(i)}e.reConfigStore(t),r.setData(t)},initBind(){for(var t,e=this.chart,r=0,i=e.length;r<i;r++)(t=e[r]).bind&&this.chartBind(t)},chartBind(t){const e=this.widget,r=t.bind;e.on(r.event,this.onBindEvent,{chart:t})},onBindEvent(t,e){const r=t,i=this.chart,s=i.bind,a=s.series,h=e.data,n=i.id;switch(s.action){case"add":var o=r.highchart.doesSeriesExist(n,h[a.name]),g=r.highchart.getNumberSeries(n);if(!1!==o&&1!==g)return void r.highchart.removeSeries(n,o);i.maxToShow&&i.maxToShow<=g&&r.highchart.removeLastSeries(n),r.highchart.isTreeMap(n)?r.highchart.setSeriesData(n,{data:h[a.data]}):r.highchart.addSeries(n,{name:h[a.name],data:h[a.data]})}}}),Fancy.define("Fancy.grid.plugin.HighChart",{extend:Fancy.Plugin,ptype:"grid.highchart",inWidgetName:"highchart",constructor:function(){this.Super("const",arguments)},init(){this.Super("init",arguments),this.ons()},ons(){},setData(t){var e=this.widget.store.getDataView(),r=t.fields,i=0,s=e.length,a=0,h=r.length,n=this.getChart(t.id).series,o=t.read;if(o&&void 0!==o.rowIndex&&(e=[e[o.rowIndex]],h=1),Fancy.isString(r))for(;a<h;a++){var g=e[a][r],c=n[a],d=[];i=0,s=g.length;if(t.names)for(;i<s;i++){var l={name:t.names[i],value:g[i]};d.push(l)}else for(;i<s;i++)d.push(g[i]);if(!c)break;c.setData(d),t.name&&c.update({name:e[a][t.name]})}else for(;a<h;a++){var u=r[a];c=n[a],d=[];for(i=0;i<s;i++)d.push(e[i][u]);c.setData(d)}},setSeriesData(t,e){this.getChart(t).series[0].setData(e.data)},set(t,e){var r=this.getFieldsMap(t);this.getChart(t.id).series[r[e.key]].data[e.rowIndex].update(Number(e.value))},sort(t){var e=this.widget.store,r=this.getChart(t.id),i=t.categories?t.categories:r.xAxis[0].categories,s=e.order,a=[],h=0,n=s?s.length:i.length;if(s)for(;h<n;h++)a.push(i[s[h]]);else for(;h<n;h++)a.push(i[h]);return r.xAxis[0].update({categories:a},!0),this.update(t),{original:i,newCategories:a}},update(t){for(var e,r=this.widget.store.getDataView(),i=t.fields,s=0,a=r.length,h=0,n=this.getChart(t.id),o=n.series,g=[],c=0,d=i.length;c<d;c++){const t=i[c];s=0;const e=[];for(;s<a;s++)e.push(r[s][t]);g.push(e)}for(e=o.length;h<e;h++){o[h].setData(g[h],!1)}n.redraw()},getData(t){for(var e=this.getChart(t.id),r=r=t.fields,i=0,s=r.length,a=e.series,h=a[0].data.length,n=[];i<s;i++)for(var o=r[i],g=0,c=a[i];g<h;g++)void 0===n[g]&&(n[g]={}),n[g][o]=c.data[g].y;const d=this.getColumnsChartIndexes();for(i=0,s=d.length;i<s;i++){const t=d[i],r=t.split("."),s=e[r[0]][0][r[1]];for(g=0,h=s.length;g<h;g++)n[g][t]=s[g]}return n},getColumnsChartIndexes(){for(var t=[],e=this.widget.columns,r=0,i=e.length;r<i;r++){const i=e[r].index;/xAxis\../.test(i)&&t.push(i)}return t},getFieldsMap(t){for(var e={},r=t.fields,i=0,s=r.length;i<s;i++)e[r[i]]=i;return e},addSeries(t,e){this.getChart(t).addSeries(e)},getNumberSeries(t){return this.getChart(t).series.length},removeLastSeries(t){const e=this.getChart(t);e.series[e.series.length-1].remove()},removeSeries(t,e){this.getChart(t).series[e].remove()},doesSeriesExist(t,e){for(var r=this.getChart(t),i=0,s=r.series.length;i<s;i++)if(r.series[i].name===e)return i;return!1},isTreeMap(t){const e=this.getChart(t);return void 0!==e.series[0]&&"treemap"===e.series[0].type},getChart(t){var e;return Highcharts.charts.forEach((r,i)=>{r.renderTo.id===t&&(e=r)}),e}});