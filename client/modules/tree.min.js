Fancy.modules.tree=!0,Fancy.Mixin("Fancy.store.mixin.Tree",{initTreeData(e){const t=this;e=e||t.data,t.isTree=!0,e&&0!==e.length&&(e=Fancy.isObject(e)?t.treeReadData(e.items):t.treeReadData(e),t.setData(e))},treeReadData(e,t,a){const d=this,i=d.widget;let n=[];return t=t||1,Fancy.each(e,e=>{e.data&&(e=e.data),e.$deep=t,e.leaf=!!e.leaf,e.expanded=!!e.expanded,Fancy.isArray(e.filteredChild)&&e.filteredChild.length?e.leaf=!1:e.child&&e.child.length&&(e.leaf=!1),a&&(e.parentId=a),e.id||(Fancy.idSeed++,e.id=Fancy.idSeed+1e3),n.push(e),e.expanded&&(e.id&&(i.tree?i.tree.expandMap[e.id]=!0:(i._tempExpandMap=i._tempExpandMap||{},i._tempExpandMap[e.id]=!0)),n=n.concat(d.treeReadData(e.child||[],t+1,e.id)))}),n},treeGetDataAsTree(){const e=[];return Fancy.each(this.data,t=>{1===t.get("$deep")&&e.push(t)}),e},treeSort(e,t,a,d,i){var n=this,r=[],c=[],o={},p=[];Fancy.each(e,e=>{const t=e.data||e;r.push(t[a]),void 0===o[t[a]]?o[t[a]]=e:(Fancy.isArray(o[t[a]])||(o[t[a]]=[o[t[a]]]),o[t[a]].push(e))});let s=!1,l=!1;if(r.length){let t;s=!0,l=!0,Fancy.each(e,e=>{const d=e.data||e;""!==d[a]&&(s=!1),void 0!==t&&t!==d[a]&&(l=!1),t=d[a]})}if("number"===d)switch(t){case"asc":c=i?Fancy.Array.copy(r).sort((e,t)=>i("asc",e,t)):Fancy.Array.copy(r).sort((e,t)=>e-t);break;case"desc":c=i?Fancy.Array.copy(r).sort((e,t)=>i("desc",e,t)):Fancy.Array.copy(r).sort((e,t)=>t-e)}else switch(t){case"asc":c=Fancy.Array.copy(r).sort();break;case"desc":c=(c=Fancy.Array.copy(r).sort()).reverse()}return Fancy.each(c,(i,r)=>{let c=o[i];Fancy.isArray(c)&&(c=c.splice(0,1)[0]),(s||l)&&(c=e[r]);var h=c.data||c;h.child&&h.expanded&&(c.data.sorted=n.treeSort(h.child,t,a,d)),p.push(c)}),p},treeReadSortedId(e){let t=this,a=[];return Fancy.each(e,e=>{a.push(e.id),(e=t.getById(e.id)).data.expanded&&(e.data.sorted?a=a.concat(t.treeReadSortedId(e.data.sorted)):e.data.child&&(a=a.concat(t.treeReadSortedId(e.data.child))))}),a},treeReBuildData(){let e=[],t=[];Fancy.each(this.data,t=>{1===t.get("$deep")&&e.push(t.data)}),t=this.treeReadData(e),this.setData(t)}}),function(){const e=Fancy.GRID_COLUMN_TREE_EXPANDER_CLS,t=function(e,a=0){const d=this,i=d.widget;return Fancy.each(e,function(e){a++;let n=e.data?e.data:e;i.store.filteredData?n.id&&i.store.map[n.id]&&(n=i.store.map[n.id].data):n=i.getById(n.id).data;const r=n.child;r&&n.expanded&&(a+=t.apply(d,[r]))}),a};Fancy.define("Fancy.grid.plugin.Tree",{extend:Fancy.Plugin,ptype:"grid.tree",inWidgetName:"tree",singleExpand:!1,constructor:function(){this.Super("const",arguments)},init(){const e=this,t=e.widget;e.expandMap={},t._tempExpandMap&&(e.expandMap=t._tempExpandMap),e.Super("init",arguments),e.ons()},ons(){const e=this,t=e.widget;t.once("init",()=>{t.on("rowdblclick",e.onRowDBLClick,e),t.on("cellclick",e.onTreeExpanderClick,e),t.on("beforesort",e.onBeforeSort,e)})},onRowDBLClick(e,t){const a=this,d=a.widget,i=t.item;i.get("leaf")||d.edit&&2===d.edit.clicksToEdit||(i.get("expanded")?a.collapseRow(t.item):a.expandRow(t.item))},onTreeExpanderClick(t,a){const d=this,i=a.item;Fancy.get(a.e.target).hasClass(e)&&(i.get("leaf")||(i.get("expanded")?d.collapseRow(a.item):d.expandRow(a.item)))},collapseRow(e){var a=this.widget,d=a.store,i=e.get("child"),n=(e.get("filteredChild"),e.get("id"));a.$onChangeUpdate=!1,this.expandMap[n]=!1,e.set("expanded",!1);var r=d.getRow(e.get("id")),c=0,o=t.apply(this,[i]);if(d.filteredData){var p,s={};s[e.get("id")]=!0;var l;for(c=0,o=d.data.length;c<o&&(e=d.data[c],!(l&&l>=e.data.$deep));c++){if(s[e.data.parentId]){l||(l=e.data.$deep-1),p||(p=c);const t=d.data.splice(p,1)[0];t.data.child&&(s[t.data.id]=!0),delete d.map[t.id],c--,o--}e.data.child&&l&&(s[e.data.id]=!0)}d.order&&(delete d.order,delete d.filterOrder,d.reSort()),d.changeDataView()}else{for(a.store.treeCollapsing=!0;c<o;c++)a.removeAt(r+1);delete a.store.treeCollapsing}delete a.$onChangeUpdate,a.update(),a.fire("treecollapse")},expandRow(e){var t,a=this,d=a.widget,i=d.store,n=e.get("child"),r=(e.get("filteredChild"),e.get("id")),c=e.get("parentId");if(d.$onChangeUpdate=!1,a.singleExpand)if(c){t=d.getById(c).get("child"),Fancy.each(t,function(e){let t=e.get("expanded");void 0!==a.expandMap[e.id]&&(t=a.expandMap[e.id]),!0===t&&a.collapseRow(d.getById(e.id))})}else t=d.findItem("parentId",""),Fancy.each(t,function(e){let t=e.get("expanded");void 0!==a.expandMap[e.id]&&(t=a.expandMap[e.id]),!0===t&&a.collapseRow(e)});a.expandMap[r]=!0,e.set("expanded",!0);var o=i.getRow(e.get("id")),p=e.get("$deep")+1,s=!1;if(i.filteredData){const t=e.get("id");Fancy.each(i.data,function(e,a){if(e.id===t)return o=a,!0})}const l=function(e,t,i,n){return n=n||r,Fancy.each(e,function(e){var r=e.data;e.data||(s=!0,r=e),r.$deep=i,r.parentId=n;var c=r.expanded;if(void 0!==a.expandMap[r.id]?(c=a.expandMap[r.id],r.expanded=c):void 0!==r.child&&(r.expanded=!1),t++,d.insert(t,r),!0===c){var o=r.child;r.filteredChild,t=l(o,t,i+1,r.id)}}),t};d.store.treeExpanding=!0,l(n,o,p),delete d.store.treeExpanding,s&&Fancy.each(e.data.child,function(t,a){const d=i.getById(t.id);void 0!==d&&(e.data.child[a]=d)}),delete d.$onChangeUpdate,i.sorters&&i.order&&(delete i.order,delete i.filterOrder,i.reSort(),i.changeDataView({doNotFired:!0})),d.update(),d.fire("treeexpand")},onBeforeSort(e,t){const a=this;"drop"===t.action&&a.onDropSort()},onDropSort(){this.widget.store.treeReBuildData()}})}();